<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20001102//EN" 
  "http://www.w3.org/TR/2000/CR-SVG-20001102/DTD/svg-20001102.dtd">

<!-- SLIDEHEADER -->
<svg width="800" height="600" onload="on_load(evt)" onunload="timer.clearInterval()">

<defs>
  <!-- STYLE -->
  <style type="text/css"><![CDATA[
    .title {fill:black; font-size: 50; font-family: Verdana, Helvetica, sans-serif } 
    .titleshadow {fill:#ccaaaa; font-size: 50; font-family: Verdana, Helvetica, sans-serif } 
    .normal {fill:black; font-size: 35; font-family: Verdana, Helvetica, sans-serif } 
    .smaller {fill:black; font-size: 25; font-family: Verdana, Helvetica, sans-serif } 
    .outercircle {fill:#88aa88 }
    .innercircle {fill:#555555 }
    ]]>
  </style>
  <!-- ENDSTYLE -->
  <!-- BACKGRADIENT -->
  <radialGradient id="radgrad" gradientUnits="objectBoundingBox" cx="10%" cy="90%" fx="10%" fy="90%" r="90%">
    <stop offset="0%" style="stop-color:#2222aa"/>
    <stop offset="100%" style="stop-color:#aaaaaa"/>
  </radialGradient>
  <!-- ENDBACKGRADIENT -->
  <!-- NEXTARROW -->
  <symbol id="arrow" viewBox="0 0 3 3">
    <path d="M0,1L1.5,1L1.5,0L3,1.5L1.5,3L1.5,2L0,2Z"/>
  </symbol>
  <!-- ENDNEXTARROW -->
</defs>

<script type="text\ecmascript" ><![CDATA[

  var current = 1;
  var onex = -700;
  var twoopac = 0.0;
  var threevis = 0;
  var threescale = 0.01;
  var fourstyle = "fill:url(#four); stroke: black; font-weight: bold; font-size: 65; font-family: Verdana, Helvetica, sans-serif";
  var fourvis = 0;
  var fourx = 0;


	function on_load (evt)
	{
		// This is needed for MSIE to expose the safecall function to
		// the global setInterval function.
		//window.safecall = safecall;

		// Save a pointer to the svgDocument object so that we can use it to
		// retrieve various named elements in the svg document.
		//svgdoc = evt.getCurrentNode().getOwnerDocument();
		svgdoc = document;

		// Start the animation loop.
		//setInterval ('safecall("next_frame()")', 100);
		timer.setInterval ('next_frame()', 200);
		//timer.setInterval ('safecall("next_frame()")', 1000);
	}

	function next_frame ()
	{
           if (current == 1) {
		// Retrieve handle to the path being animated.
		var onenode = svgdoc.getElementById ('one');
		if (!onenode) {
               current++;
               return;
             }

             if (onex < 0.0) {
               onex = onex + 20;
		   onenode.setAttribute ('transform', 'translate(' + onex + ',0)');
             } else {
		   current++;
		}
           } else if (current == 2) {
		// Retrieve handle to the path being animated.
		var twonode = svgdoc.getElementById ('two');
		if (!twonode)
			return;

                if (twoopac < 1.0) {
                  twoopac = twoopac + 0.05;
		  twonode.setAttribute ('style', 'fill-opacity: '+ twoopac);
                } else {
		  current++;
		}
           } else if (current == 3) {
		// Retrieve handle to the path being animated.
		var threenode = svgdoc.getElementById ('three');
		if (!threenode)
			return;
		if (threevis == 0) {
		  threenode.setAttribute ('style', 'visibility: visible');
                  threevis = 1;
                } else if (threescale < 1.0) {
                  threescale = threescale + 0.05;
                  if (threescale > 1.0) threescale = 1.0;
                  threenode.setAttribute ('transform', 'scale(' + threescale + ',1)');
        	} else {
                  current++;
                }
           } else if (current == 4) {
		// Retrieve handle to the path being animated.
		var fournode = svgdoc.getElementById ('four');
		var fouranode = svgdoc.getElementById ('foura');
		if (!fournode)
			return;
		if (fourvis == 0) {
		  fouranode.setAttribute ('style', fourstyle);
                  fourvis = 1;
		} else if (fourx < 300) {
		  fournode.setAttribute ('gradientTransform', 'translate(' + fourx + ',0)');
                  fourx = fourx + 5;
                } else {
                  current++;
                }


           } else if (current == 5) {
                timer.clearInterval();
           }
	}

	/*
	* This function executes the input statement while suppressing any JavaScript
	* errors that might occur. The global variable safecall_has_error is set to
	* true if an error does occur
	*/
	function safecall (stmt)
	{
		//var old_error = window.onerror;
		//window.onerror = safecall_suppress_errors;
		eval (stmt);
		//window.onerror = old_error;
	}

	/*
	* This function is called to suppress javascript error messages when it is
	* known that the errors are not real problems.
	*/
	function safecall_suppress_errors ()
	{
		return true;
	}
]]></script>

<!-- ============================================ -->
<!-- Slide Background                             -->
<!-- ============================================ -->


<g>

  <!-- BACKGROUND -->
  <rect style="fill:url(#radgrad); stroke:#000000; stroke-width: 4" x="2" y="2" width="796" height="596"/>
  <!-- ENDBACKGROUND -->
  <!-- LOGO -->
  <image x="710" y="10" width="80" height="100" xlink:href="csiro.svg"/>
  <!-- ENDLOGO -->
  <!-- URL -->
  <text x="10" y="590" style="fill:#000000; font-family: Verdana; font-size:25">
  http://www.cmis.csiro.au/svg

  </text>
  <!-- ENDURL -->

  <!-- ARROWLINK -->
  <a xlink:href="script4.svg">
    <use x="753" y="560" width="50" height="35" style="fill:#993333;stroke:#000000;stroke-width:0.1" xlink:href="#arrow"/>
  </a>
  <!-- ENDARROWLINK -->
</g>

<!-- ENDSLIDEHEADER -->

<!-- ============================================ -->
<!-- Slide Body                                   -->
<!-- ============================================ -->

<g>

<text x="33" y="83" class="titleshadow">Scripting...</text>
<text x="30" y="80" class="title">Scripting...</text>

<g id="one" transform="translate(-1000,0)">
<text x="120" y="190" class="normal">Allows you to replicate
</text>
</g>

<text id="two" x="120" y="250" class="normal" style="fill-opacity:0.0">the groovy effects</text>

<g transform="translate(120, 310)">
<text id="three" x="0" y="0" class="normal" style="visibility:hidden" transform="scale(0.001, 1)">of presentation packages</text>
</g>

<linearGradient id="four" gradientUnits="objectBoundingBox" x1="0" y1="0.1" x2="0.1" y2="0" spreadMethod="reflect" gradientTransform="translate(0,0)">
  <stop style="stop-color:#2255aa" offset="0" />
  <stop style="stop-color:#55aa55" offset="1" />
</linearGradient>

<text id="foura" x="120" y="390" style="visibility:hidden">and adds more!</text>

</g>

</svg>

